type Query {
  users(query: String): [User!]!
  subs(query: String): [Sub!]!
  posts(query: String): [Post!]!
  findPostById(id: ID!): Post!
  favoritePosts: [Post!]!
  comments: [Comment!]!
  likes: [Like!]!
  me: User!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
	login(data: LoginUserInput!): AuthPayload!
  deleteUser: User!
  updateUser(data: UpdateUserInput!): User!

  createSub(data: CreateSubInput!): Sub!

  createPost(data: CreatePostInput!): Post!
  deletePost(id: ID!): Post!
  updatePost(id: ID!, data: UpdatePostInput!): Post!

  createComment(data: CreateCommentInput!): Comment!
  deleteComment(id: ID!): Comment!
  updateComment(id: ID!, data: UpdateCommentInput!): Comment!

  createLike(data: CreateLikeInput!): Like!
  deleteLike(id: ID!): Like!
}

type Subscription {
  comment(postId: ID!): CommentSubscriptionPayload!
  like(postId: ID!): LikeSubscriptionPayload!
  post: PostSubscriptionPayload!
}

input CreateUserInput {
  username: String!
	password: String!
  email: String!
  age: Int
}

input UpdateUserInput {
  username: String
  email: String
  age: Int
}

input LoginUserInput {
	username: String!
	password: String!
}

input CreateSubInput {
  name: String
}

input CreatePostInput {
  sub: ID!
  title: String!
  body: String!
  published: Boolean!
}

input UpdatePostInput {
  title: String
  body: String
  published: Boolean
}

input CreateCommentInput {
  text: String!
  post: ID!
}

input UpdateCommentInput {
  text: String
}

input CreateLikeInput {
  post: ID!
}

type User {
  id: ID!
  username: String!
  email: String!
  age: Int
  posts: [Post!]!
  comments: [Comment!]!
}

type Sub {
  id: ID!
  name: String!
  posts: [Post!]!
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  sub: Sub!
  comments: [Comment!]!
  likes: [Like!]!
}

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}

type Like {
  id: ID!
  user: User!
  post: Post!
}

type AuthPayload {
	token: String!
	user: User!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type PostSubscriptionPayload {
  mutation: MutationType!
  data: Post!
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  data: Comment!
}

type LikeSubscriptionPayload {
  mutation: MutationType!
  data: Like!
}